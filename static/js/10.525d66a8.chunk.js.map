{"version":3,"sources":["pages/levelQuestionList.js","config/index.js","apiServices/Api.js","apiServices/QuestionService.js"],"names":["QuestionListPage","props","columns","dataField","text","filter","textFilter","formatter","cellContent","row","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","reactstrap__WEBPACK_IMPORTED_MODULE_6__","onClick","id","level_id","history","push","outline","color","size","react_icons_md__WEBPACK_IMPORTED_MODULE_14__","useHistory","_useState","useState","_useState2","Object","D_Quiz_Quiz_Admin_Panel_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","questionDataArray","newQuestionDataArray","useEffect","getUserList","e","QuestionService","GetLevelList","then","response","data","status","Record","catch","error","console","log","finally","reactstrap__WEBPACK_IMPORTED_MODULE_7__","in","timeout","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","sm","md","offset","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_3___default","keyField","pagination","paginationFactory","filterFactory","__webpack_require__","d","__webpack_exports__","BASEURL","axios__WEBPACK_IMPORTED_MODULE_1__","axios__WEBPACK_IMPORTED_MODULE_1___default","n","_config_index__WEBPACK_IMPORTED_MODULE_2__","instance","axios","create","baseURL","defaults","headers","common","interceptors","use","Promise","reject","_Api__WEBPACK_IMPORTED_MODULE_0__","AddQuestion","payload","Api","post","GetQuestionList","get","EditQuestion","questionId","concat","GetGameList","EditLevelList","GetLevelQuestionSetList","AddLevelQuestion","GetLevelQuestionList"],"mappings":"sQA8IeA,UAxHU,SAAAC,GACvB,IAAMC,EAAU,CACd,CACEC,UAAW,YACXC,KAAM,YACNC,OAAQC,wBAEV,CACEH,UAAW,QACXC,KAAM,QACNC,OAAQC,wBAEV,CACEH,UAAW,iBACXC,KAAM,kBAER,CACED,UAAW,GACXC,KAAM,SACNG,UAAW,SAACC,EAAaC,GAAd,OACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,QAAS,kBA0DSC,EA1DgBP,EAAIQ,cA2D9CC,EAAQC,KAAK,uBAAwB,CACnCF,SAAUD,IAFd,IAA4BA,GAzDlBI,SAAO,EACPC,MAAM,UACNC,KAAK,MAELZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,MANF,SAOU,QAKdL,EAAUM,cAjCkBC,EAkCkBC,mBAAS,IAlC3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAkCzBK,EAlCyBH,EAAA,GAkCNI,EAlCMJ,EAAA,GAoChCK,oBAAU,WACRC,KACC,IACH,IAAMA,EAAc,SAAAC,GAElBC,IAAgBC,eACbC,KAAK,SAAAC,GAAY,IACRC,EAASD,EAATC,KACJA,IAAwB,IAAhBA,EAAKC,QACfT,EAAqBQ,EAAKE,OAAOF,QAIpCG,MAAM,SAAAC,GACLC,QAAQC,IAAI,uCAAwCF,KAErDG,QAAQ,eAkCb,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KACvBvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAI,CAAE/B,KAAM,GAAIgC,OAAQ,IACnC5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAM1C,UAAU,OACdH,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,iBACY,KAUZ9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACEgD,SAAS,KACTpB,KAAMT,EACN5B,QAASA,EACT0D,WAAYC,MACZxD,OAAQyD,gDCnI1BC,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,IAAMA,EAAU,6DCAvBH,EAAA,OAAAI,EAAAJ,EAAA,IAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,IAOeE,EAAA,aACb,IAAMM,EAAWC,IAAMC,OAAO,CAC5BC,QAASR,MAcX,OAXAK,EAASI,SAASC,QAAQC,OAAO,+BAAiC,IAElEN,EAASO,aAAaxC,SAASyC,IAC7B,SAAUzC,GAER,OAAOA,GAET,SAAUK,GACR,OAAOqC,QAAQC,OAAOtC,KAGnB4B,oCCvBT,IAAAW,EAAAnB,EAAA,IAAAA,EAAA,IAGeE,EAAA,GACbkB,YADa,SACDC,GACV,OAAOC,cAAMC,KAAK,wBAAyBF,IAE7CG,gBAJa,WAKX,OAAOF,cAAMG,IAAN,uBAGTC,aARa,SAQAC,GACX,OAAOL,cAAMG,IAAN,kCAAAG,OAA4CD,KAGrDE,YAZa,WAaX,OAAOP,cAAMG,IAAI,mBAGnBpD,aAhBa,WAiBX,OAAOiD,cAAMG,IAAI,oBAEnBK,cAnBa,SAmBC5E,GACZ,OAAOoE,cAAMG,IAAN,4BAAAG,OAAsC1E,KAE/C6E,wBAtBa,WAuBX,OAAOT,cAAMG,IAAI,+BAGnBO,iBA1Ba,SA0BIX,GAEf,OADAxC,QAAQC,IAAIuC,GACLC,cAAMC,KAAK,qBAAsBF,IAE1CY,qBA9Ba,WA+BX,OAAOX,cAAMG,IAAN","file":"static/js/10.525d66a8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\n\r\nimport paginationFactory, {\r\n  PaginationProvider,\r\n} from 'react-bootstrap-table2-paginator';\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  Table,\r\n  Button,\r\n  Fade,\r\n} from 'reactstrap';\r\nimport QuestionService from '../apiServices/QuestionService';\r\nimport { MdEdit } from 'react-icons/md';\r\n\r\nconst QuestionListPage = props => {\r\n  const columns = [\r\n    {\r\n      dataField: 'game_name',\r\n      text: 'Game Name',\r\n      filter: textFilter(),\r\n    },\r\n    {\r\n      dataField: 'level',\r\n      text: 'Level',\r\n      filter: textFilter(),\r\n    },\r\n    {\r\n      dataField: 'total_question',\r\n      text: 'Total Question',\r\n    },\r\n    {\r\n      dataField: '',\r\n      text: 'Action',\r\n      formatter: (cellContent, row) => (\r\n        <div className=\"checkbox disabled\">\r\n          <Button\r\n            onClick={() => handleEditQuestion(row.level_id)}\r\n            outline\r\n            color=\"success\"\r\n            size=\"sm\"\r\n          >\r\n            <MdEdit /> Edit\r\n          </Button>{' '}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  let history = useHistory();\r\n  const [questionDataArray, newQuestionDataArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getUserList();\r\n  }, []);\r\n  const getUserList = e => {\r\n    // ... submit to API or something\r\n    QuestionService.GetLevelList()\r\n      .then(response => {\r\n        const { data } = response;\r\n        if (data && data.status === true) {\r\n          newQuestionDataArray(data.Record.data);\r\n        } else {\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log('On Catch Add_Submission_Tagging_User', error);\r\n      })\r\n      .finally(() => {});\r\n  };\r\n\r\n  const handleEditLevlQ = item => {\r\n    item.level_q_is_active = '0';\r\n    console.log(item);\r\n\r\n    QuestionService.AddLevelQuestion(item)\r\n      .then(response => {\r\n        const { data } = response;\r\n        if (data) {\r\n          // alert();\r\n        } else {\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log('On Catch Add_Submission_Tagging_User', error);\r\n      })\r\n      .finally(() => {});\r\n\r\n    // ... submit to API or something\r\n  };\r\n\r\n  function handleNewQuestion() {\r\n    history.push('/AddLevelQuestionSet', {\r\n      level_q_id: '',\r\n    });\r\n  }\r\n  function handleEditQuestion(id) {\r\n    history.push('/addLevelQuestionSet', {\r\n      level_id: id,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <Fade in={true} timeout={200}>\r\n        <Row>\r\n          <Col sm=\"12\" md={{ size: 12, offset: 0 }}>\r\n            <Card className=\"m-3\">\r\n              <CardHeader>\r\n                Level Set{' '}\r\n                {/* <Button\r\n                color=\"success\"\r\n                onClick={handleNewQuestion}\r\n                className=\"float-right\"\r\n              >\r\n                Add New Set\r\n              </Button>{' '} */}\r\n              </CardHeader>\r\n\r\n              <CardBody>\r\n                <BootstrapTable\r\n                  keyField=\"id\"\r\n                  data={questionDataArray}\r\n                  columns={columns}\r\n                  pagination={paginationFactory()}\r\n                  filter={filterFactory()}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionListPage;\r\n","export const BASEURL = 'http://65.0.110.222:5000/';\r\nexport const API_VERSION = 'v1';\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { BASEURL } from '../config/index';\r\n// import { router } from \"@/router\";\r\n// import cookieType from \"@/helpers/cookieType\";\r\n// import Constant from \"@/helpers/constant\";\r\n\r\nexport default () => {\r\n  const instance = axios.create({\r\n    baseURL: BASEURL,\r\n  });\r\n\r\n  instance.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\r\n\r\n  instance.interceptors.response.use(\r\n    function (response) {\r\n      // Do something with response data\r\n      return response;\r\n    },\r\n    function (error) {\r\n      return Promise.reject(error);\r\n    },\r\n  );\r\n  return instance;\r\n};\r\n","import Api from './Api';\r\nimport { API_VERSION } from '../config/index';\r\n\r\nexport default {\r\n  AddQuestion(payload) {\r\n    return Api().post('admin/addEditQuestion', payload);\r\n  },\r\n  GetQuestionList() {\r\n    return Api().get(`admin/questionlist`);\r\n  },\r\n\r\n  EditQuestion(questionId) {\r\n    return Api().get(`admin/questionlist?question_id=${questionId}`);\r\n  },\r\n  // Level Questions\r\n  GetGameList() {\r\n    return Api().get('admin/gamelist');\r\n  },\r\n\r\n  GetLevelList() {\r\n    return Api().get('admin/LevelList');\r\n  },\r\n  EditLevelList(level_id) {\r\n    return Api().get(`admin/LevelList?level_id=${level_id}`);\r\n  },\r\n  GetLevelQuestionSetList() {\r\n    return Api().get('admin/LevelQuestionSetList');\r\n  },\r\n\r\n  AddLevelQuestion(payload) {\r\n    console.log(payload);\r\n    return Api().post('admin/addEditLevel', payload);\r\n  },\r\n  GetLevelQuestionList() {\r\n    return Api().get(`admin/questionlist?isUnique=1`);\r\n  },\r\n\r\n  //   GetSubmissionFeedbacks(payload) {\r\n  //     return Api().post(\r\n  //       `/${API_VERSION}/section/feedback/${payload.feedback_id}`,\r\n  //       payload,\r\n  //     );\r\n  //   },\r\n};\r\n"],"sourceRoot":""}